#include "ball.h"
#include "field.h"


Ball::Ball(Field *parent, int x, int y, int width, int height)
    : AbstractShape( x, y, width, height ), m_parent(parent)
{

}

Ball::~Ball() { qDebug() << "Ball - dtor - Ball removed"; }



void Ball::moveBy(int x, int y)
{
    QRect r = rect();

    int newX = r.x() + x;
    int maxX = m_parent->width() - r.width();
    int newY = r.y() + y;
    int maxY = m_parent->height() - r.height();

    if ( newX < 0 ) newX = 0;
    if ( newX > maxX ) newX = maxX;
    if ( newY < 0 ) newY = -newY;
    if ( newY > maxY ) newY = -y + maxY;

    r.moveLeft( newX );
    r.moveTop( newY );
    setRect( r );
}

void Ball::collidesWith(QList<TargetField*> &targets)
{
    if ( targets.isEmpty() ) return;

    QRect ballRect = rect();

    auto it = std::remove_if(targets.begin(), targets.end(),
                             [&](TargetField *target) {
                                 if ( ballRect.intersects( target->rect() )) {
                                     qDebug() << "Collision with TargetField";
                                     m_parent->addScorePoints( target->scorePoint() );
                                     emit m_parent->totalScoreChanged();
                                     delete target;
                                     return true;
                                 }
                                 return false;
                             } );
    targets.erase( it, targets.end() );
}

void Ball::collidesWith(Paddel *paddel)
{
    if ( !paddel ) return;

    if ( rect().intersects( paddel->rect() )) {
        qDebug() << "Collision with Paddel";
    }
}
